Random Seed:  9617
opt.num_scales: 9, opt.min_size: 25, real_.shape[2]: 240, real_.shape[3]: 2640, opt.scale_factor_init: 0.75, pow1: 0.10416666666666667, log2: 0.75
scale2stop: 1, opt.max_size: 2000, real_.shape[2]: 240, real_.shape[3]: 2640, opt.scale_factor_init: 0.75, log1: 0.7575757575757576, log2: 0.75
opt.num_scales: 9, opt.stop_scale: 8, opt.scale1: 0.7575757575757576, real.shape[2]: 182, real.shape[3]: 2000
opt.scale_factor: 0.780249641128132, scale2stop: 1, opt.stop_scale: 8
GeneratorConcatSkip2CleanAdd(
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (spatial): SpatialAttention(
    (conv1): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (sigmoid): Sigmoid()
  )
  (head): ConvBlock(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Sequential(
    (0): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1))
    (1): Tanh()
  )
)
WDiscriminator(
  (head): ConvBlock(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1))
)
scale 0:[0/2000]
scale 0:[25/2000]
scale 0:[50/2000]
scale 0:[75/2000]
scale 0:[100/2000]
scale 0:[125/2000]
scale 0:[150/2000]
scale 0:[175/2000]
scale 0:[200/2000]
scale 0:[225/2000]
scale 0:[250/2000]
scale 0:[275/2000]
scale 0:[300/2000]
scale 0:[325/2000]
scale 0:[350/2000]
scale 0:[375/2000]
scale 0:[400/2000]
scale 0:[425/2000]
scale 0:[450/2000]
scale 0:[475/2000]
scale 0:[500/2000]
scale 0:[525/2000]
scale 0:[550/2000]
scale 0:[575/2000]
scale 0:[600/2000]
scale 0:[625/2000]
scale 0:[650/2000]
scale 0:[675/2000]
scale 0:[700/2000]
scale 0:[725/2000]
scale 0:[750/2000]
scale 0:[775/2000]
scale 0:[800/2000]
scale 0:[825/2000]
scale 0:[850/2000]
scale 0:[875/2000]
scale 0:[900/2000]
scale 0:[925/2000]
scale 0:[950/2000]
scale 0:[975/2000]
scale 0:[1000/2000]
scale 0:[1025/2000]
scale 0:[1050/2000]
scale 0:[1075/2000]
scale 0:[1100/2000]
scale 0:[1125/2000]
scale 0:[1150/2000]
scale 0:[1175/2000]
scale 0:[1200/2000]
scale 0:[1225/2000]
scale 0:[1250/2000]
scale 0:[1275/2000]
scale 0:[1300/2000]
scale 0:[1325/2000]
scale 0:[1350/2000]
scale 0:[1375/2000]
scale 0:[1400/2000]
scale 0:[1425/2000]
scale 0:[1450/2000]
scale 0:[1475/2000]
scale 0:[1500/2000]
scale 0:[1525/2000]
scale 0:[1550/2000]
scale 0:[1575/2000]
scale 0:[1600/2000]
scale 0:[1625/2000]
scale 0:[1650/2000]
scale 0:[1675/2000]
scale 0:[1700/2000]
scale 0:[1725/2000]
scale 0:[1750/2000]
scale 0:[1775/2000]
scale 0:[1800/2000]
scale 0:[1825/2000]
scale 0:[1850/2000]
scale 0:[1875/2000]
scale 0:[1900/2000]
scale 0:[1925/2000]
scale 0:[1950/2000]
scale 0:[1975/2000]
scale 0:[1999/2000]
GeneratorConcatSkip2CleanAdd(
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (spatial): SpatialAttention(
    (conv1): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (sigmoid): Sigmoid()
  )
  (head): ConvBlock(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Sequential(
    (0): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1))
    (1): Tanh()
  )
)
WDiscriminator(
  (head): ConvBlock(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1))
)
scale 1:[0/2000]
scale 1:[25/2000]
scale 1:[50/2000]
scale 1:[75/2000]
scale 1:[100/2000]
scale 1:[125/2000]
scale 1:[150/2000]
scale 1:[175/2000]
scale 1:[200/2000]
scale 1:[225/2000]
scale 1:[250/2000]
scale 1:[275/2000]
scale 1:[300/2000]
scale 1:[325/2000]
scale 1:[350/2000]
scale 1:[375/2000]
scale 1:[400/2000]
scale 1:[425/2000]
scale 1:[450/2000]
scale 1:[475/2000]
scale 1:[500/2000]
scale 1:[525/2000]
scale 1:[550/2000]
scale 1:[575/2000]
scale 1:[600/2000]
scale 1:[625/2000]
scale 1:[650/2000]
scale 1:[675/2000]
scale 1:[700/2000]
scale 1:[725/2000]
scale 1:[750/2000]
scale 1:[775/2000]
scale 1:[800/2000]
scale 1:[825/2000]
scale 1:[850/2000]
scale 1:[875/2000]
scale 1:[900/2000]
scale 1:[925/2000]
scale 1:[950/2000]
scale 1:[975/2000]
scale 1:[1000/2000]
scale 1:[1025/2000]
scale 1:[1050/2000]
scale 1:[1075/2000]
scale 1:[1100/2000]
scale 1:[1125/2000]
scale 1:[1150/2000]
scale 1:[1175/2000]
scale 1:[1200/2000]
scale 1:[1225/2000]
scale 1:[1250/2000]
scale 1:[1275/2000]
scale 1:[1300/2000]
scale 1:[1325/2000]
scale 1:[1350/2000]
scale 1:[1375/2000]
scale 1:[1400/2000]
scale 1:[1425/2000]
scale 1:[1450/2000]
scale 1:[1475/2000]
scale 1:[1500/2000]
scale 1:[1525/2000]
scale 1:[1550/2000]
scale 1:[1575/2000]
scale 1:[1600/2000]
scale 1:[1625/2000]
scale 1:[1650/2000]
scale 1:[1675/2000]
scale 1:[1700/2000]
scale 1:[1725/2000]
scale 1:[1750/2000]
scale 1:[1775/2000]
scale 1:[1800/2000]
scale 1:[1825/2000]
scale 1:[1850/2000]
scale 1:[1875/2000]
scale 1:[1900/2000]
scale 1:[1925/2000]
scale 1:[1950/2000]
scale 1:[1975/2000]
scale 1:[1999/2000]
GeneratorConcatSkip2CleanAdd(
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (spatial): SpatialAttention(
    (conv1): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (sigmoid): Sigmoid()
  )
  (head): ConvBlock(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Sequential(
    (0): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1))
    (1): Tanh()
  )
)
WDiscriminator(
  (head): ConvBlock(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1))
)
scale 2:[0/2000]
scale 2:[25/2000]
scale 2:[50/2000]
scale 2:[75/2000]
scale 2:[100/2000]
scale 2:[125/2000]
scale 2:[150/2000]
scale 2:[175/2000]
scale 2:[200/2000]
scale 2:[225/2000]
scale 2:[250/2000]
scale 2:[275/2000]
scale 2:[300/2000]
scale 2:[325/2000]
scale 2:[350/2000]
scale 2:[375/2000]
scale 2:[400/2000]
scale 2:[425/2000]
scale 2:[450/2000]
scale 2:[475/2000]
scale 2:[500/2000]
scale 2:[525/2000]
scale 2:[550/2000]
scale 2:[575/2000]
scale 2:[600/2000]
scale 2:[625/2000]
scale 2:[650/2000]
scale 2:[675/2000]
scale 2:[700/2000]
scale 2:[725/2000]
scale 2:[750/2000]
scale 2:[775/2000]
scale 2:[800/2000]
scale 2:[825/2000]
scale 2:[850/2000]
scale 2:[875/2000]
scale 2:[900/2000]
scale 2:[925/2000]
scale 2:[950/2000]
scale 2:[975/2000]
scale 2:[1000/2000]
scale 2:[1025/2000]
scale 2:[1050/2000]
scale 2:[1075/2000]
scale 2:[1100/2000]
scale 2:[1125/2000]
scale 2:[1150/2000]
scale 2:[1175/2000]
scale 2:[1200/2000]
scale 2:[1225/2000]
scale 2:[1250/2000]
scale 2:[1275/2000]
scale 2:[1300/2000]
scale 2:[1325/2000]
scale 2:[1350/2000]
scale 2:[1375/2000]
scale 2:[1400/2000]
scale 2:[1425/2000]
scale 2:[1450/2000]
scale 2:[1475/2000]
scale 2:[1500/2000]
scale 2:[1525/2000]
scale 2:[1550/2000]
scale 2:[1575/2000]
scale 2:[1600/2000]
scale 2:[1625/2000]
scale 2:[1650/2000]
scale 2:[1675/2000]
scale 2:[1700/2000]
scale 2:[1725/2000]
scale 2:[1750/2000]
scale 2:[1775/2000]
scale 2:[1800/2000]
scale 2:[1825/2000]
scale 2:[1850/2000]
scale 2:[1875/2000]
scale 2:[1900/2000]
scale 2:[1925/2000]
scale 2:[1950/2000]
scale 2:[1975/2000]
scale 2:[1999/2000]
GeneratorConcatSkip2CleanAdd(
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (spatial): SpatialAttention(
    (conv1): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (sigmoid): Sigmoid()
  )
  (head): ConvBlock(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Sequential(
    (0): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1))
    (1): Tanh()
  )
)
WDiscriminator(
  (head): ConvBlock(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1))
)
scale 3:[0/2000]
scale 3:[25/2000]
scale 3:[50/2000]
scale 3:[75/2000]
scale 3:[100/2000]
scale 3:[125/2000]
scale 3:[150/2000]
scale 3:[175/2000]
scale 3:[200/2000]
scale 3:[225/2000]
scale 3:[250/2000]
scale 3:[275/2000]
scale 3:[300/2000]
scale 3:[325/2000]
scale 3:[350/2000]
scale 3:[375/2000]
scale 3:[400/2000]
scale 3:[425/2000]
scale 3:[450/2000]
scale 3:[475/2000]
scale 3:[500/2000]
scale 3:[525/2000]
scale 3:[550/2000]
scale 3:[575/2000]
scale 3:[600/2000]
scale 3:[625/2000]
scale 3:[650/2000]
scale 3:[675/2000]
scale 3:[700/2000]
scale 3:[725/2000]
scale 3:[750/2000]
scale 3:[775/2000]
scale 3:[800/2000]
scale 3:[825/2000]
scale 3:[850/2000]
scale 3:[875/2000]
scale 3:[900/2000]
scale 3:[925/2000]
scale 3:[950/2000]
scale 3:[975/2000]
scale 3:[1000/2000]
scale 3:[1025/2000]
scale 3:[1050/2000]
scale 3:[1075/2000]
scale 3:[1100/2000]
scale 3:[1125/2000]
scale 3:[1150/2000]
scale 3:[1175/2000]
scale 3:[1200/2000]
scale 3:[1225/2000]
scale 3:[1250/2000]
scale 3:[1275/2000]
scale 3:[1300/2000]
scale 3:[1325/2000]
scale 3:[1350/2000]
scale 3:[1375/2000]
scale 3:[1400/2000]
scale 3:[1425/2000]
scale 3:[1450/2000]
scale 3:[1475/2000]
scale 3:[1500/2000]
scale 3:[1525/2000]
scale 3:[1550/2000]
scale 3:[1575/2000]
scale 3:[1600/2000]
scale 3:[1625/2000]
scale 3:[1650/2000]
scale 3:[1675/2000]
scale 3:[1700/2000]
scale 3:[1725/2000]
scale 3:[1750/2000]
scale 3:[1775/2000]
scale 3:[1800/2000]
scale 3:[1825/2000]
scale 3:[1850/2000]
scale 3:[1875/2000]
scale 3:[1900/2000]
scale 3:[1925/2000]
scale 3:[1950/2000]
scale 3:[1975/2000]
scale 3:[1999/2000]
GeneratorConcatSkip2CleanAdd(
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (spatial): SpatialAttention(
    (conv1): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (sigmoid): Sigmoid()
  )
  (head): ConvBlock(
    (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Sequential(
    (0): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1))
    (1): Tanh()
  )
)
WDiscriminator(
  (head): ConvBlock(
    (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1))
)
scale 4:[0/2000]
scale 4:[25/2000]
scale 4:[50/2000]
scale 4:[75/2000]
scale 4:[100/2000]
scale 4:[125/2000]
scale 4:[150/2000]
scale 4:[175/2000]
scale 4:[200/2000]
scale 4:[225/2000]
scale 4:[250/2000]
scale 4:[275/2000]
scale 4:[300/2000]
scale 4:[325/2000]
scale 4:[350/2000]
scale 4:[375/2000]
scale 4:[400/2000]
scale 4:[425/2000]
scale 4:[450/2000]
scale 4:[475/2000]
scale 4:[500/2000]
scale 4:[525/2000]
scale 4:[550/2000]
scale 4:[575/2000]
scale 4:[600/2000]
scale 4:[625/2000]
scale 4:[650/2000]
scale 4:[675/2000]
scale 4:[700/2000]
scale 4:[725/2000]
scale 4:[750/2000]
scale 4:[775/2000]
scale 4:[800/2000]
scale 4:[825/2000]
scale 4:[850/2000]
scale 4:[875/2000]
scale 4:[900/2000]
scale 4:[925/2000]
scale 4:[950/2000]
scale 4:[975/2000]
scale 4:[1000/2000]
scale 4:[1025/2000]
scale 4:[1050/2000]
scale 4:[1075/2000]
scale 4:[1100/2000]
scale 4:[1125/2000]
scale 4:[1150/2000]
scale 4:[1175/2000]
scale 4:[1200/2000]
scale 4:[1225/2000]
scale 4:[1250/2000]
scale 4:[1275/2000]
scale 4:[1300/2000]
scale 4:[1325/2000]
scale 4:[1350/2000]
scale 4:[1375/2000]
scale 4:[1400/2000]
scale 4:[1425/2000]
scale 4:[1450/2000]
scale 4:[1475/2000]
scale 4:[1500/2000]
scale 4:[1525/2000]
scale 4:[1550/2000]
scale 4:[1575/2000]
scale 4:[1600/2000]
scale 4:[1625/2000]
scale 4:[1650/2000]
scale 4:[1675/2000]
scale 4:[1700/2000]
scale 4:[1725/2000]
scale 4:[1750/2000]
scale 4:[1775/2000]
scale 4:[1800/2000]
scale 4:[1825/2000]
scale 4:[1850/2000]
scale 4:[1875/2000]
scale 4:[1900/2000]
scale 4:[1925/2000]
scale 4:[1950/2000]
scale 4:[1975/2000]
scale 4:[1999/2000]
GeneratorConcatSkip2CleanAdd(
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (spatial): SpatialAttention(
    (conv1): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (sigmoid): Sigmoid()
  )
  (head): ConvBlock(
    (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Sequential(
    (0): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1))
    (1): Tanh()
  )
)
WDiscriminator(
  (head): ConvBlock(
    (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1))
)
scale 5:[0/2000]
scale 5:[25/2000]
scale 5:[50/2000]
scale 5:[75/2000]
scale 5:[100/2000]
scale 5:[125/2000]
scale 5:[150/2000]
scale 5:[175/2000]
scale 5:[200/2000]
scale 5:[225/2000]
scale 5:[250/2000]
scale 5:[275/2000]
scale 5:[300/2000]
scale 5:[325/2000]
scale 5:[350/2000]
scale 5:[375/2000]
scale 5:[400/2000]
scale 5:[425/2000]
scale 5:[450/2000]
scale 5:[475/2000]
scale 5:[500/2000]
scale 5:[525/2000]
scale 5:[550/2000]
scale 5:[575/2000]
scale 5:[600/2000]
scale 5:[625/2000]
scale 5:[650/2000]
scale 5:[675/2000]
scale 5:[700/2000]
scale 5:[725/2000]
scale 5:[750/2000]
scale 5:[775/2000]
scale 5:[800/2000]
scale 5:[825/2000]
scale 5:[850/2000]
scale 5:[875/2000]
scale 5:[900/2000]
scale 5:[925/2000]
scale 5:[950/2000]
scale 5:[975/2000]
scale 5:[1000/2000]
scale 5:[1025/2000]
scale 5:[1050/2000]
scale 5:[1075/2000]
scale 5:[1100/2000]
scale 5:[1125/2000]
scale 5:[1150/2000]
scale 5:[1175/2000]
scale 5:[1200/2000]
scale 5:[1225/2000]
scale 5:[1250/2000]
scale 5:[1275/2000]
scale 5:[1300/2000]
scale 5:[1325/2000]
scale 5:[1350/2000]
scale 5:[1375/2000]
scale 5:[1400/2000]
scale 5:[1425/2000]
scale 5:[1450/2000]
scale 5:[1475/2000]
scale 5:[1500/2000]
scale 5:[1525/2000]
scale 5:[1550/2000]
scale 5:[1575/2000]
scale 5:[1600/2000]
scale 5:[1625/2000]
scale 5:[1650/2000]
scale 5:[1675/2000]
scale 5:[1700/2000]
scale 5:[1725/2000]
scale 5:[1750/2000]
scale 5:[1775/2000]
scale 5:[1800/2000]
scale 5:[1825/2000]
scale 5:[1850/2000]
scale 5:[1875/2000]
scale 5:[1900/2000]
scale 5:[1925/2000]
scale 5:[1950/2000]
scale 5:[1975/2000]
scale 5:[1999/2000]
GeneratorConcatSkip2CleanAdd(
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (spatial): SpatialAttention(
    (conv1): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (sigmoid): Sigmoid()
  )
  (head): ConvBlock(
    (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Sequential(
    (0): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1))
    (1): Tanh()
  )
)
WDiscriminator(
  (head): ConvBlock(
    (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1))
)
scale 6:[0/2000]
scale 6:[25/2000]
scale 6:[50/2000]
scale 6:[75/2000]
scale 6:[100/2000]
scale 6:[125/2000]
scale 6:[150/2000]
scale 6:[175/2000]
scale 6:[200/2000]
scale 6:[225/2000]
scale 6:[250/2000]
scale 6:[275/2000]
scale 6:[300/2000]
scale 6:[325/2000]
scale 6:[350/2000]
scale 6:[375/2000]
scale 6:[400/2000]
scale 6:[425/2000]
scale 6:[450/2000]
scale 6:[475/2000]
scale 6:[500/2000]
scale 6:[525/2000]
scale 6:[550/2000]
scale 6:[575/2000]
scale 6:[600/2000]
scale 6:[625/2000]
scale 6:[650/2000]
scale 6:[675/2000]
scale 6:[700/2000]
scale 6:[725/2000]
scale 6:[750/2000]
scale 6:[775/2000]
scale 6:[800/2000]
scale 6:[825/2000]
scale 6:[850/2000]
scale 6:[875/2000]
scale 6:[900/2000]
scale 6:[925/2000]
scale 6:[950/2000]
scale 6:[975/2000]
scale 6:[1000/2000]
scale 6:[1025/2000]
scale 6:[1050/2000]
scale 6:[1075/2000]
scale 6:[1100/2000]
scale 6:[1125/2000]
scale 6:[1150/2000]
scale 6:[1175/2000]
scale 6:[1200/2000]
scale 6:[1225/2000]
scale 6:[1250/2000]
scale 6:[1275/2000]
scale 6:[1300/2000]
scale 6:[1325/2000]
scale 6:[1350/2000]
scale 6:[1375/2000]
scale 6:[1400/2000]
scale 6:[1425/2000]
scale 6:[1450/2000]
scale 6:[1475/2000]
scale 6:[1500/2000]
scale 6:[1525/2000]
scale 6:[1550/2000]
scale 6:[1575/2000]
scale 6:[1600/2000]
scale 6:[1625/2000]
scale 6:[1650/2000]
scale 6:[1675/2000]
scale 6:[1700/2000]
scale 6:[1725/2000]
scale 6:[1750/2000]
scale 6:[1775/2000]
scale 6:[1800/2000]
scale 6:[1825/2000]
scale 6:[1850/2000]
scale 6:[1875/2000]
scale 6:[1900/2000]
scale 6:[1925/2000]
scale 6:[1950/2000]
scale 6:[1975/2000]
scale 6:[1999/2000]
GeneratorConcatSkip2CleanAdd(
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (spatial): SpatialAttention(
    (conv1): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (sigmoid): Sigmoid()
  )
  (head): ConvBlock(
    (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Sequential(
    (0): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1))
    (1): Tanh()
  )
)
WDiscriminator(
  (head): ConvBlock(
    (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1))
)
scale 7:[0/2000]
scale 7:[25/2000]
scale 7:[50/2000]
scale 7:[75/2000]
scale 7:[100/2000]
scale 7:[125/2000]
scale 7:[150/2000]
scale 7:[175/2000]
scale 7:[200/2000]
scale 7:[225/2000]
scale 7:[250/2000]
scale 7:[275/2000]
scale 7:[300/2000]
scale 7:[325/2000]
scale 7:[350/2000]
scale 7:[375/2000]
scale 7:[400/2000]
scale 7:[425/2000]
scale 7:[450/2000]
scale 7:[475/2000]
scale 7:[500/2000]
scale 7:[525/2000]
scale 7:[550/2000]
scale 7:[575/2000]
scale 7:[600/2000]
scale 7:[625/2000]
scale 7:[650/2000]
scale 7:[675/2000]
scale 7:[700/2000]
scale 7:[725/2000]
scale 7:[750/2000]
scale 7:[775/2000]
scale 7:[800/2000]
scale 7:[825/2000]
scale 7:[850/2000]
scale 7:[875/2000]
scale 7:[900/2000]
scale 7:[925/2000]
scale 7:[950/2000]
scale 7:[975/2000]
scale 7:[1000/2000]
scale 7:[1025/2000]
scale 7:[1050/2000]
scale 7:[1075/2000]
scale 7:[1100/2000]
scale 7:[1125/2000]
scale 7:[1150/2000]
scale 7:[1175/2000]
scale 7:[1200/2000]
scale 7:[1225/2000]
scale 7:[1250/2000]
scale 7:[1275/2000]
scale 7:[1300/2000]
scale 7:[1325/2000]
scale 7:[1350/2000]
scale 7:[1375/2000]
scale 7:[1400/2000]
scale 7:[1425/2000]
scale 7:[1450/2000]
scale 7:[1475/2000]
scale 7:[1500/2000]
scale 7:[1525/2000]
scale 7:[1550/2000]
scale 7:[1575/2000]
scale 7:[1600/2000]
scale 7:[1625/2000]
scale 7:[1650/2000]
scale 7:[1675/2000]
scale 7:[1700/2000]
scale 7:[1725/2000]
scale 7:[1750/2000]
scale 7:[1775/2000]
scale 7:[1800/2000]
scale 7:[1825/2000]
scale 7:[1850/2000]
scale 7:[1875/2000]
scale 7:[1900/2000]
scale 7:[1925/2000]
scale 7:[1950/2000]
scale 7:[1975/2000]
scale 7:[1999/2000]
GeneratorConcatSkip2CleanAdd(
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (spatial): SpatialAttention(
    (conv1): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (sigmoid): Sigmoid()
  )
  (head): ConvBlock(
    (conv): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Sequential(
    (0): Conv2d(128, 3, kernel_size=(3, 3), stride=(1, 1))
    (1): Tanh()
  )
)
WDiscriminator(
  (head): ConvBlock(
    (conv): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1))
    (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
  (channel): ChannelAttention(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (max_pool): AdaptiveMaxPool2d(output_size=1)
    (fc1): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (relu1): ReLU()
    (fc2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (sigmoid): Sigmoid()
  )
  (body): Sequential(
    (block1): ConvBlock(
      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block2): ConvBlock(
      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (block3): ConvBlock(
      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))
      (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (LeakyRelu): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (tail): Conv2d(128, 1, kernel_size=(3, 3), stride=(1, 1))
)
Traceback (most recent call last):
  File "/home/users/chenkaim/personal/SinGAN-PCG/main_train.py", line 29, in <module>
    train(opt, Gs, Zs, reals, NoiseAmp)
  File "/home/users/chenkaim/personal/SinGAN-PCG/SinGAN/training.py", line 39, in train
    z_curr,in_s,G_curr = train_single_scale(D_curr,G_curr,reals,Gs,Zs,in_s,NoiseAmp,opt)
  File "/home/users/chenkaim/personal/SinGAN-PCG/SinGAN/training.py", line 161, in train_single_scale
    gradient_penalty = functions.calc_gradient_penalty(netD, real, fake, opt.lambda_grad, opt.device)
  File "/home/users/chenkaim/personal/SinGAN-PCG/SinGAN/functions.py", line 141, in calc_gradient_penalty
    gradients = torch.autograd.grad(outputs=disc_interpolates, inputs=interpolates,
  File "/home/users/chenkaim/.local/lib/python3.9/site-packages/torch/autograd/__init__.py", line 234, in grad
    return Variable._execution_engine.run_backward(
RuntimeError: CUDA out of memory. Tried to allocate 172.00 MiB (GPU 0; 11.91 GiB total capacity; 10.02 GiB already allocated; 13.00 MiB free; 11.08 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
